}
}
print(y)
}
x=2:10
for (i in x) {
if(x%%2==0){
y=x
if(x%%2!=0){
y=NA
}
}
print(y)
}
x=4
x=4
if(x%%2=0){
y=x
print(y)
}
if(x%%2==0){
y=x
print(y)
}
x=8
if(x%%2==0){
y=x
print(y)
}
x=8
if(x%%2==0){
y=x-2
print(y)
}
x=9
if(x%%2==0){
y=x-2
print(y)
}
if(x%%2==0){
y=x-2
}else{
x%%2!=0
y=NA
}
y
############
x=8
if(x%%2==0){
y=x-2
}else{
x%%2!=0
y=NA
}
y
################
x=8
if(x%%2==0){
y=x-2
}if{
x%%2!=0
y=NA
}
if(x%%2==0){
y=x-2
}
if{
x%%2!=0
y=NA
}
############
x=8
if(x%%2==0){
y=x-2
}else(x%%2!=0){
y=NA
}
############
x=8
if(x%%2==0){
y=x-2
}else(x%%2!=0){
y=NA
}
}else{x%%2!=0{
############
x=8
if(x%%2==0){
if(x%%2==0){
y=x-2
}else{x%%2!=0
y=NA
}
if(x%%2==0){
y=x-2
}else{x%%2!=0
y=NA
}
y
if(x%%2==0){
y=x-2
}else{x%%2!=0
y=NA
}
y
############
x=9
if(x%%2==0){
y=x-2
}else{x%%2!=0
y=NA
}
y
############
x=9
if(x%%2==0){
y="x est un nombre pair"
}else{
x%%2!=0
y="x est un nombre impair"
}
y
############
x=6
if(x%%2==0){
y="x est un nombre pair"
}else{
x%%2!=0
y="x est un nombre impair"
}
y
################
## transpose
df=data.frame(x=LETTERS[1:10],sample(10))
df
################
## transpose
df=data.frame(x=LETTERS[1:5],sample(5))
df
t(df)
rownames(df)<-letters[1:5]
df
t(df)
rownames(df)<-c("Kokot","Filius","Djesibon","Djepanou","Kokot")
################
## transpose
df=data.frame(x=LETTERS[1:5],sample(5))
df
rownames(df)<-c("Kokot","Filius","Djesibon","Djepanou","Kokot")
rownames(df)<-c("Kokot","Filius","Djesibon","Djepanou","Kokout")
df
colnames(df)<-c("Code","Score")
df
# transpose
t(df)
# explorer df
str(df)
# transpose
dft<-t(df)
# explorer tdf
str(dft)
t(df)
t(dft)
# explorer tdf
str(dft3)
dft3<-t(dft)
# explorer tdf
str(dft3)
t(dft)
dft3<-t(dft)
# explorer tdf
str(dft3)
dft3<-data.frame(dft3)
# explorer dft3
str(dft3)
# convertir les score en numeric
dft3$Score<-as.numeric(dft3$Score)
# explorer
str(dft3)
dft3<-t(dft)
# explorer tdf
str(dft3)
dft3<-data.frame(dft3)
# explorer dft3
str(dft3)
paste("Raulin","Cadet")
paste("Raulin","Cadet",sep = "-")
source("~/.active-rstudio-document", echo=TRUE)
paste("Raulin", "Cadet", sep = "-")
source("~/.active-rstudio-document", echo=TRUE)
library(tidyverse)
df_ht<-readxl::read_excel("WB_HT_DATA.xlsx")
df_ht<-readxl::read_excel("WB_HT_DATA.xlsx")
View(df_ht)
df_ht<-t(df_ht)
colnames(df_ht)<-df_ht[5,] # Assigner la ligne 5
# enlever lignes et colonnes inutiles
df_ht<-df_ht[-c(1:6),-c(1:2)]
#changer le nom de la premiere colonne en "Annee"
df_ht<-rename(Années=`Indicator Name`)
#changer le nom de la premiere colonne en "Annee"
df_ht<-df_ht%>%rename(Années=`Indicator Name`)
library(dplyr)
#changer le nom de la premiere colonne en "Annee"
df_ht<-df_ht%>%rename(Années=`Indicator Name`)
# explorer l'objet df_ht
str(df_ht)
# explorer l'objet df_ht
class(df_ht)
df_ht<-as_tibble(df_ht)
#changer le nom de la premiere colonne en "Annee"
df_ht<-df_ht%>%rename(Années=`Indicator Name`)
dim(df_ht)
class(df_ht)
apply(df_ht, 2, class)
apply(df_ht[,1], 2, class)
df_type<-apply(df_ht, 2, class)
df_type<-data.frame(apply(df_ht, 2, class))
View(df_type)
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht[,2:]<-apply(df_ht[,2:],2,as.numeric)
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-data.frame(df_ht[,1],apply(df_ht[,2:],2,as.numeric))
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-cbind(df_ht[,1],apply(df_ht[,2:],2,as.numeric))
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-rbind(df_ht[,1],apply(df_ht[,2:],2,as.numeric))
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-rbind(df_ht[,1],sapply(df_ht[,2:],2,as.numeric))
col_class<-(mapply(df_ht, 2, class))
col_class<-(sapply(df_ht, 2, class))
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-sapply(df_ht[,2:],2,as.numeric)
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-lapply(df_ht[,2:],2,as.numeric)
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-lapply(df_ht[,2:1444],2,as.numeric)
df_ht[,2:1444]
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-apply(df_ht[,2:1444],2,as.numeric)
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-apply(df_ht[,2:],2,as.numeric)
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-cbind.data.frame(df_ht[,1],apply(df_ht[,2:1444],2,as.numeric))
View(df_ht1)
df_ht$`GDP (constant 2015 US$)`[1]
df_ht1$`GDP (constant 2015 US$)`[1]
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-cbind.data.frame(df_ht[,1],apply(df_ht[,2:1444],2,as.numeric_version))
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-cbind.data.frame(df_ht[,1],apply(df_ht[,2:1444],2,as.numeric))
df_ht$`GDP (constant 2015 US$)`
df_ht$`GDP (constant 2015 US$)`[1]
df_ht1$`GDP (constant 2015 US$)`[1]
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-cbind.data.frame(df_ht[,1],apply(df_ht[,2:1444],2,as.numeric(as.character)))
# convertir les colonnes 2 a 1444 en
# donnees numeriques
df_ht1<-cbind.data.frame(df_ht[,1],apply(df_ht[,2:1444],2,as.numeric,digits=20))
df_ht$`GDP (constant 2015 US$)`[1]
df_ht1$`GDP (constant 2015 US$)`[1]
df_ht$merchandise `Imports of goods and services (% of GDP)`[1]
df_ht$merchandise `Imports of goods and services (% of GDP)`[10]
df_ht$merchandise `Imports of goods and services (% of GDP)`[100]
df_ht$`Merchandise exports to low- and middle-income economies in Middle East & North Africa (% of total merchandise exports)`[1]
df_ht1$`Merchandise exports to low- and middle-income economies in Middle East & North Africa (% of total merchandise exports)`[1]
df_ht1%>%summarise(mean(`GDP per capita (current US$)`))
df_ht1%>%select(Années,`GDP per capita (current US$)`)%>%
plot()
###
df_ht1%>%select(Années,`GDP per capita (current US$)`)%>%
plot(type="l")
library(dplyr)
df=data.frame(x=LETTERS[1:5],sample(5))
View(df)
# donner des noms aux lignes
rownames(df)<-c("Kokot","Filius","Djesibon","Djepanou","Koukout")
# donner des noms aux colonnes
colnames(df)<-c("Code","Score")
df
#explorer df
str(df)
dft<-t(df)
View(dft)
class(df)
class(dft)
str(dft)    # explorer l'objet
dft3<-t(dft)
View(dft3)
class(dft3)
str(dft3)
dft3<-data.frame(dft3)
str(dft3)
# convertir la variable score en donnees
# numeriques
dft3$Score<-as.numeric(dft3$Score)
str(dft3)
###############
x="Raulin"
###############
pr="Raulin"
###############
pr="Raulin"
pr2="Lincifort"
nm="Cadet"
pr
pr2
nm
# on peut combiner ces string
# avec la fonction paste()
paste(pr,pr2,nm)
paste(pr,pr2,nm,sep = "-")
paste(pr,nm,sep = ".")
tolower(pr)
#############################################
#### Illustration manipulation Data Frame ###
#############################################
df_ht<-readxl::read_excel("WB_HT_DATA.xlsx")
str(df_ht)
View(df_ht)
# transpose df_ht
df_ht<-t(df_ht)
# utiliser ligne 5 comme nom des colonnes
colnames(df_ht)<-df_ht[5,]
# enlever les lignes et colonnes inutiles
df_ht<-df_ht[-c(1:6),-c(1:2)]
class(df_ht)
# convertir df_ht en tibble
df_ht<-dplyr::as_tibble(df_ht)
str(df_ht)
# changer le nom de la 1ere colonne en "Annees"
df_ht<-df_ht%>%rename(Années=`Indicator Name`)
# verifier le type de donnees
apply(df_ht, 2, class)
col_class<-data.frame(apply(df_ht, margin,class))
col_class<-data.frame(apply(df_ht, 2,class))
View(col_class)
dim(df_ht)
# convertir les colonnes 2 a 1444 en donnees numeriques
apply(df_ht[,2:1444],2,as.numeric)
# convertir les colonnes 2 a 1444 en donnees numeriques
df_ht1<-apply(df_ht[,2:1444],2,as.numeric)
View(df_ht1)
df_ht2<-cbind.data.frame(df_ht[,1],
apply(df_ht[,2:1444],2,as.numeric))
View(df_ht2)
mean(df_ht$`GDP (constant 2015 US$)`)
mean(df_ht$`GDP (constant 2015 US$)`,na.rm=T)
mean(df_ht2$`GDP (constant 2015 US$)`,na.rm=T)
#########################
df_ht2%>%summarise(Moyenne=mean(`GDP per capita (current US$)`))
plot(df_ht2$`GDP per capita (current US$)`)
plot(df_ht2$`GDP per capita (current US$)`)
plot(df_ht2$`GDP per capita (current US$)`,type="l")
df_ht2%>%select(Années `GDP per capita (current US$)`)%>%
plot()
df_ht2%>%select(Années, `GDP per capita (current US$)`)%>%
plot()
df_ht2%>%select(Années, `GDP per capita (current US$)`)%>%
plot(type="l")
library(dplyr)
df=data.frame(x=LETTERS[1:5],y=sample(5))
df
View(df)
class(df)
str(df)
dft<-t(df)
dft
class(dft)
View(dft)
dft<-data.frame(dft)
class(dft)
dft3<-t(dft)
dft3<-t(dft)
View(dft3)
class(dft3)
dft3<-data.frame(dft3)
class(dft3)
str(dft3)
mean(dft3$y)
# convertir la variable en donnees numeriques
dft3$y<-as.numeric(dft3$y)
#calculons la moyenne de y
mean(dft3$y)
prenom
##################
## Utilisation paste()
prenom="Raulin"
prenom2="Lincifort"
nom="Cadet"
prenom
prenom2
nom
prenom
prenom2
nom
paste(prenom,prenom2,nom)
paste(prenom,prenom2,nom,sep = "-")
#############################################
#### Illustration Manipulation Data Frame ###
#############################################
df_ht<-readxl::read_excel("WB_HT_DATA.xlsx")
View(df_ht)
# transposer df_ht
df_ht<-t(df_ht)
class(df_ht)
# convertir df_ht en data frame
df_ht<-data.frame(df_ht)
str(df_ht)
# utiliser la ligne 5 comme noms des colonnes
colnames(df_hg)<-df_ht[5,]
# utiliser la ligne 5 comme noms des colonnes
colnames(df_ht)<-df_ht[5,]
View(df_ht)
# enlever les lignes et colonnes inutiles
df_hg<-df_ht[-c(1:6),-c(1:2)]
View(df_hg)
# changer le nom de la 1ere colonne en "Annees"
df_hg<-df_hg%>%rename(Années=`Indicator Name`)
# verifier le type de donnees dans chaque colonne
apply(df_hg,2,class)
# visualiser les memes resultats dans un data frame
col_class<-data.frame(apply(df_hg, 2, class))
View(col_class)
# convertir donnees en "numeric"
z<-"23"
class(z)
z<-as.numeric(z)
z
class(z)
# convertir les donnees des colonnes 2 a 1444
# en donnees numeriques.
df_hg<-apply(df_hg[,2:1444], 2, as.numeric)
# de preference, je veux avoir l'annee aussi dans
# mon nouveau data frame
df_hg<-cbind.data.frame(df_ht[,1],df_hg)
# convertir donnees charact en numer
a="123"
class(a)
a<-as.numeric(a)
class(a)
# convertir colonnes 2 a 1444 en donnees numeriques
df_ht1<-apply(df_ht,2,as.numeric)
View(df_ht1)
# convertir en donnees numeriques (illustration)
a="23"
class(a)
a<-as.numeric(a)
class(a)
# convertir colonnes 2 a 1444 en donnees numeriques
df_hg1<-apply(df_hg, 2,as.numeric)
View(df_hg1)
# J'ajoute la colonne annee
df_hg2<-cbind.data.frame(df_hg[,1],df_hg1)
View(df_hg2)
# enlever les lignes et colonnes inutiles
df_hg<-df_ht[-c(1:6),-c(1:2)]
# changer le nom de la 1ere colonne en "Annees"
df_hg<-df_hg%>%rename(Années=`Indicator Name`)
# verifier le type de donnees dans chaque colonne
apply(df_hg,2,class)
# visualiser les memes resultats dans un data frame
col_class<-data.frame(apply(df_hg, 2, class))
# fonction as.numeric
a="123"
class(a)
a<-as.numeric(a)
class(a)
# convertir colonnes 2 a 1444 de df_hg en donnees numeriques
df_hg1<-apply(df_hg, 2, as.numeric)
View(df_hg1)
# convertir colonnes 2 a 1444 en donnees numer
df_hg2<-apply(df_hg[,2:1444],2,as.numeric)
View(df_hg2)
# Ajouter la colonne des annees a df_hg2
df_hg3<-cbind.data.frame(df_hg[,1],df_hg2)
View(df_hg3)
# modifier le nom de la 1ere colonne
df_hg3<-df_hg3%>%rename(Années=`df_hg[, 1]`)
View(df_hg3)
# Ajouter la colonne des annees a df_hg2
df_hg3<-cbind.data.frame(df_hg[,1],df_hg2)
View(df_hg3)
# modifier le nom de la 1ere colonne
df_hg3<-df_hg3%>%rename(Années=`df_hg[,1`)
# modifier le nom de la 1ere colonne
df_hg3<-df_hg3%>%rename(Années=`df_hg[,1]`)
# modifier le nom de la 1ere colonne
df_hg3<-df_hg3%>%rename(Années=`df_hg[,1]`)
# modifier le nom de la 1ere colonne
df_hg3<-df_hg3%>%rename(Années=`df_hg[, 1]`)
# calcule de la moyenne du PIB per capita a prix courant
df_hg3%>%summarise(Moyenne=mean(`GDP per capita (current US$)`), na.rm=T)
df_hg3%>%select(Années,`GDP per capita (current US$)`)%>%
plot()
#
df_hg3%>%select(Années,`GDP per capita (current US$)`)%>%
plot(type="l")
