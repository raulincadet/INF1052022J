write_disk(tf<-tempfile(fileext ="agregatsmon.xls")))
yf<-read_excel(tf,1L)
yf
library(dplyr)
class(yf)
yf<-data.frame(yf)
class(yf)
library(lubridate)
yf<-data.frame(yf)
str(yf)
yf
get(url,
write_disk(tf<-tempfile(fileext ="agregatsmon.xls")))
## Importation des donnees
library(readxl)
library(httr)
url<-"https://www.brh.ht/wp-content/uploads/agregatsmon.xls"
get(url,
write_disk(tf<-tempfile(fileext ="agregatsmon.xls")))
library(readxl)
library(httr)
url1<-"https://www.brh.ht/wp-content/uploads/agregatsmon.xls"
GET(url1,
write_disk(tf<-tempfile(fileext="agregatsmon.xls")))
MB4<-read_excel(tf,1L)
##### Lancer le package lubridate
library(lubridate)
###### convertir les donnees en data frame
MB4<-data.frame(MB4)
str(MB4)
##### utiliser la ligne 2 comme nom des colonnes
colnames(MB4)<-MB4[2,]
############ enlever les lignes et les colonnes inutiles
df_hg<-MB4[-c(521:530),]
df_hg<-df_hg[-c(1:1),]
df_hg<-df_hg[,-c(5:5)]
df_hg<-df_hg[,8]
df_hg<-df_hg[, -c(8:8)]
df_hg<-df_hg[,-c(9:9)]
df_hg<-df_hg[,-c(18:18)]
MB4<-read_excel(tf,1L)
##### Lancer le package lubridate
library(lubridate)
###### convertir les donnees en data frame
MB4<-data.frame(MB4)
str(MB4)
##### utiliser la ligne 2 comme nom des colonnes
colnames(MB4)<-MB4[2,]
############ enlever les lignes et les colonnes inutiles
df_hg<-MB4[-c(521:530),]
View(df_hg)
df_hg<-df_hg[-c(1:1),]
df_hg<-df_hg[,-c(5:5)]
df_hg<-df_hg[,8]
df_hg<-df_hg[, -c(8:8)]
df_hg<-df_hg[,-c(9:9)]
df_hg<-df_hg[,-c(18:18)]
df_hg<-df_hg[,-c(21:21)]
df_hg<-df_hg[,-c(42:42)]
df_hg<-df_hg[,-c(37:37)]
df_hg<-df_hg[,-c(35:35)]
df_hg<-df_hg[,-c(12:12)]
df_hg<-df_hg[,-c(16:16)]
############ creation d'un nouveau objet
GJ<-MB4[147:530,]
class(GJ)
###### Enlevons les colonnes inutiles
GJ<-GJ[,-c(5,9,11,15,20,23,25,30,35,40,42,47,56,79,84)]
GJ<-GJ%>%rename(M3= 'M3...8',taux_brh = 'TAUX DE CHANGE BRH' , depots="R?serves nettes
de changes BRH avec d?p?ts des BCMs (millions de  $)", RS="R?serves nettes de change du syst?me banc.
(millions de $)", RB="R?serves brutes de change BRH (MG ) avec dep?t $ BCM
")
##### Faisons la regression lineaire
##### Estimons le taux de change en fonction de M3 et les reserves de changes en dollars
?lm
taux_brh<-lm(formula=taux_brh~M3+ RS + RB ,data = GJ)
# Illustration et manipulation des donnes
df_brh<-readxl::read_excel("agregatsmon.xls")
# Convertir df_brh en data frame
df_brh<-data.frame(df_brh)
#verifier le type de donnee dans chaque colonne
apply(df_brh,2,class)
#visualiser les meme resultat dans un data frame
col_class<-data.frame(apply(df_brh,2,class))
install.packages("tidyverse") # le package contenant des librairies dont on aura besoin
library(tidyverse)
library(readxl) # pour lire le fichier excel
library(dplyr) # pour le traitement des donnees
download.file("https://www.brh.ht/wp-content/uploads/agregatsmon.xls", destfile = "brh_data.xls")
brh_data <- read_excel("brh_data.xls")
brh_data_1 <- brh_data[-c(1:3, 521:530), -5, -9, -11, -15, -20, -23, -25, -30,
-35, -42, -47, -56, -79, -84]
brh_data <- read_excel("brh_data.xls")
download.file("https://www.brh.ht/wp-content/uploads/agregatsmon.xls", destfile = "brh_data.xls")
####### Regression lineaire   #############
cre<-read.csv("CreditBancaire.csv")
View(cre)
reg_1<-lm(data = cre,Jours~Credit)
ref_1
reg_1
summary(reg1)
summary(reg_1)
##########
reg_1<-lm(data = cre,Jours~Credit+Rype)
##########
reg_1<-lm(data = cre,Jours~Credit+Type)
reg_1
summary(reg_1)
summary(reg_1)
reg_resum<-summary(reg_1)
reg_resum<-summary(reg_1)
reg_resum
reg_resum$coefficients
# coefficients et t student
reg_resum$coefficients[,c(1,3)]
# afficher que le tableau des coefficients
reg_resum$coefficients
# coefficients et t student
reg_resum$coefficients[,c(1,3)]
####### une fonction pour fournir que coeff et t student ##########33
result<-function(y,x,data){
reg=lm(data[,y]~data[,x])
reg_details<-summary(reg)
reg_details$coef[,c(1,3)]
}
result('Jours','Credit',data=dff)
result('Jours','Credit',data=cre)
# coefficients et t student
reg_resum$coefficients[,c(1,3)]
#########################
cre%>%
group_by(Type)
library(dplyr)
#########################
cre%>%
group_by(Type)%>%
summarise(Moyenne=mean(Jours))
# moyenne de jours par type de credit
cre%>%
group_by(Type)%>%
summarise(Moyenne_jours=mean(Jours))
# Tests de difference de la moyenne
cre%>%
group_by(Type)%>%
t.test(Jours)
# Tests de difference de la moyenne
cre%>%
group_by(Type)%>%
summarise(t.test(Jours))
# Tests de difference de la moyenne
cre%>%
group_by(Type)%>%
summarise_each_(t.test(Jours))
# moyenne de jours par type de credit
cre%>%
group_by(Type)%>%
summarise(Moyenne_jours=mean(Jours))
# Tests de difference de la moyenne
cre%>%
group_by(Type)%>%
summarise(list(Type))
# Tests de difference de la moyenne
cre%>%
group_by(Type)%>%
summarise(list(Type))%>%t.test()
# Tests de difference de la moyenne
vou<-cre%>%
group_by(Type)%>%
summarise(list(Type))
t.test(vou)
vou
View(vou)
# Tests de difference de la moyenne
vou<-cre%>%
group_by(Type)%>%
summarise(list(Type))%>%t.test(Jours)
# Tests de difference de la moyenne
vou<-cre%>%
group_by(Type)%>%
summarise(list(Type))%>%t.test(cre$Jours)
# Tests de difference de la moyenne
vou<-cre%>%
group_by(Type)%>%
summarise(t.test(Jours))
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(t.test(Jours))
# Tests de difference de la moyenne
vcre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(t.test(Jours))
# Tests de difference de la moyenne
cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(t.test(Jours))
cre%>%filter(Type!='Commerce')%>%
group_by(Type)
# Tests de difference de la moyenne
cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(list(Jours))
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(list(Jours))
t.test(vou[[1]],vou[[2]])
t.test(vou[[1]],vou[[2]],alternative = "two.sided")
vou[[2]]
t.test(unlist(vou[[1]]),unlist(vou[[2]]),alternative = "two.sided")
unlist(vou[[2]])
wstr(cre)
wstr(cre)str(cre)
str(cre)
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(list(Credit))
t.test(unlist(vou[[1]]),unlist(vou[[2]]),alternative = "two.sided")
unlist(vou[[1]])
vou
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(Credit)
View(vou)
t.test(unlist(vou[[1]]),unlist(vou[[2]]),alternative = "two.sided")
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(Credit)%>%
t.test(,alternative = "two.sided")
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(Credit)%>%
t.test(alternative = "two.sided")
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(v=Credit)%>%
t.test(alternative = "two.sided")
# Tests de difference de la moyenne
vou<-cre%>%filter(Type!='Commerce')%>%
group_by(Type)%>%
summarise(v=Credit)
View(vou)
# Tests de difference de la moyenne
com<-cre%>%filter(Type=='Commerce')
# moyenne de jours par type de credit
cre%>%
group_by(Type)%>%
summarise(Moyenne_jours=mean(Credit))
# Tests de difference de la moyenne
cons<-cre%>%filter(Type=='Consommation')%>%select(Credit)
prod<-cre%>%filter(Type=='Production')
t.test(cons,prod,alternative = "two.sided")
cons,prod,alternative = "two.sided")
# Tests de difference de la moyenne
cons<-cre%>%filter(Type=='Consommation')%>%select(Credit)
prod<-cre%>%filter(Type=='Production')
t.test(cons,prod,alternative = "two.sided")
cons
# Tests de difference de la moyenne
cons<-cre%>%filter(Type=='Consommation')%>%select(Credit)
prod<-cre%>%filter(Type=='Production')%>%select(Credit)
t.test(cons,prod,alternative = "two.sided")
t.test(cons,mu=769294,alternative = "two.sided")
# verifions si le credit moyen cons est inferieur a production
t.test(cons,prod,alternative = "less")
# verifions si cons est superieur a prod
t.test(cons,prod,alternative = 'greater')
# verifions si cons est egal a prod
t.test(cons, prod,alternative = 'two.sided')
View(cre)
# nuage de point
library(ggplot2)
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_point()
###
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point()
###
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_point(aes(color='red'))
###
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_point(aes(fill='red'))
###
ggplot(data=cre,aes(x=Jours,y=Credit,fill='red'))+
geom_point(aes())
###
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(aes())
###
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point()
###
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2)
###
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5)
##
# shape
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=15)
##
# shape
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=5)
##
# shape
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=6)
help(shape,"ggplot2")
##
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=6)
##
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=6)+
theme_bw()
##
#theme
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=2)+
theme_bw()
##
#theme
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=1)+
theme_bw()
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=1)+
theme_classic()
## change axis title
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=1)+
xlab("Nombre de jours")+
theme_classic()
################
# Geom_bar
tjours<-prop.table(table(cre$Jours))
tjours
################
# Geom_bar
tjours<-data.frame(prop.table(table(cre$Jours)))
View(tjours)
################
# Geom_bar
tsecteur<-data.frame(prop.table(table(cre$Type)))
tsecteur
################
# Geom_bar
tsecteur<-prop.table(table(cre$Type))
tsecteur
tsecteur
tsecteur=data.frame(tsecteur)
tsecteur
ggplot(data=tsecteur,aes(x=Var1,y=Freq,color='red'))+
geom_point(size=2.5,shape=1)+
theme_classic()
ggplot(data=tsecteur,aes(x=Var1,y=Freq,color='red'))+
geom_bar()
ggplot(data=tsecteur,aes(x=Var1,y=Freq,color='red'))+
geom_bar(stat = 'identity')
ggplot(data=tsecteur,aes(x=Var1,y=Freq,fill='red'))+
geom_bar(stat = 'identity')
###
ggplot(data=tsecteur,aes(x=Var1,y=Freq))+
geom_bar(stat = 'identity')
#### remplir les batons de la couleur rouge
ggplot(data=tsecteur,aes(x=Var1,y=Freq,fill='red'))+
geom_bar(stat = 'identity')
## changer noms des axes
ggplot(data=tsecteur,aes(x=Var1,y=Freq,fill='red'))+
geom_bar(stat = 'identity')+xlab("Secteurs")+ylab('Proportion')
## changer noms des axes
ggplot(data=tsecteur,aes(x=Var1,y=Freq,fill='red'))+
geom_bar(stat = 'identity')+xlab("Secteurs")+ylab('Proportion')+
legend('none')
## changer noms des axes
ggplot(data=tsecteur,aes(x=Var1,y=Freq,fill='red'))+
geom_bar(stat = 'identity')+xlab("Secteurs")+ylab('Proportion')+
geom_theme(legend('none'))
ggplot(data=cre,aes(x=Jours,y=Credit,fill=Type))+
geom_point()
ggplot(data=cre,aes(x=Jours,y=Credit,color=Type))+
geom_point()
ggplot(data=cre,aes(x=Jours,y=Credit,color=Type))+
geom_point()+
theme_light()
###
ggplot(data=cre,aes(x=Jours,y=Credit,color=Type))+
geom_point(size=3)+
theme_light()
### ajouter une tendance
ggplot(data=cre,aes(x=Jours,y=Credit,color=Type))+
geom_point()+
geom_smooth()
### ajouter une tendance
ggplot(data=cre,aes(x=Jours,y=Credit,color=Type))+
geom_point()+
geom_smooth()+
theme_light()
### ajouter une tendance
ggplot(data=cre,aes(x=Jours,y=Credit,color=Type))+
geom_point()+
geom_smooth(se=F)+
theme_light()
### ajouter une tendance
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5,shape=1)+
geom_smooth()+
xlab("Nombre de jours")+
theme_classic()
### ajouter une tendance
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5)+
geom_smooth()+
xlab("Nombre de jours")+
theme_classic()
### ajouter une tendance
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5)+
geom_smooth(color='black')+
xlab("Nombre de jours")+
theme_classic()
### enlever la partie achuree
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5)+
geom_smooth(color='black',se=FALSE)+
xlab("Nombre de jours")+
theme_classic()
### enlever la partie achuree
ggplot(data=cre,aes(x=Jours,y=Credit,color='red'))+
geom_point(size=2.5)+
geom_smooth(color='black',se=FALSE)+
xlab("Nombre de jours")+
theme_light()
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_line()
ggplot(data=cre,aes(Credit))+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_line(aes(color='navy'))
ggplot(data=cre,aes(x=Jours,y=Credit,color='navy'))+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit,fill='navy'))+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit),fill='navy')+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit),color='navy')+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit),col='navy')+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit),col='navy')+
geom_line()
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_line(col='navy')
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_line()+
theme_classic()
## change line color
ggplot(data=cre,aes(x=Jours,y=Credit))+
geom_line(col='navy')+
theme_classic()
#####
ggplot(data = cre,aes(Credit))+
geom_histogram()
#####
ggplot(data = cre,aes(Credit))+
geom_histogram(10)
#####
ggplot(data = cre,aes(Jours))+
geom_histogram(10)
ggplot(data = cre,aes(Jours)
#####
ggplot(data = cre,aes(Jours))+
geom_histogram(10)
#####
ggplot(data = cre,aes(Jours))+
geom_histogram(bins=10)
#####
ggplot(data = cre,aes(Credit))+
geom_histogram(bins=10)
#####
ggplot(data = cre,aes(Credit))+
geom_histogram(bins=10)
#####
ggplot(data = cre,aes(jour))+
geom_histogram(bins=10)
#####
ggplot(data = cre,aes(Kour))+
geom_histogram(bins=10)
#####
ggplot(data = cre,aes(Kour))+
geom_histogram(bins=10)
#####
ggplot(data = cre,aes(Jours))+
geom_histogram(bins=10)
#####
ggplot(data = cre,aes(Jours))+
geom_histogram(bins=10)+
theme_gray()
#####
ggplot(data = cre,aes(Jours))+
geom_histogram(bins=10)+
theme_light()
